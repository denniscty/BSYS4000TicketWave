// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketWave.Data;

#nullable disable

namespace TicketWave.Migrations
{
    [DbContext(typeof(TicketWaveContext))]
    [Migration("20250225053650_AddUserTable")]
    partial class AddUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("TicketWave.Models.EventTickets", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EventBuyOfferAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventBuyerID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventListUserID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventNumOfTicket")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("EventTicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventUserContactEmail")
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.HasIndex("EventListUserID");

                    b.ToTable("EventTickets");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicketWave.Models.EventTickets", b =>
                {
                    b.HasOne("User", "Seller")
                        .WithMany()
                        .HasForeignKey("EventListUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });
#pragma warning restore 612, 618
        }
    }
}
